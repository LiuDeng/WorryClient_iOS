// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Feed.pb.h"
// @@protoc_insertion_point(imports)

@implementation FeedRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FeedRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    [TopicRoot registerAllExtensions:registry];
    [BlessingRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL PBFeedTypeIsValidValue(PBFeedType value) {
  switch (value) {
    case PBFeedTypeWorry:
    case PBFeedTypeStory:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBFeedType(PBFeedType value) {
  switch (value) {
    case PBFeedTypeWorry:
      return @"PBFeedTypeWorry";
    case PBFeedTypeStory:
      return @"PBFeedTypeStory";
    default:
      return nil;
  }
}

BOOL PBFeedStateIsValidValue(PBFeedState value) {
  switch (value) {
    case PBFeedStateNormal:
    case PBFeedStateRemoved:
    case PBFeedStateProhibited:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBFeedState(PBFeedState value) {
  switch (value) {
    case PBFeedStateNormal:
      return @"PBFeedStateNormal";
    case PBFeedStateRemoved:
      return @"PBFeedStateRemoved";
    case PBFeedStateProhibited:
      return @"PBFeedStateProhibited";
    default:
      return nil;
  }
}

BOOL PBCommentTypeIsValidValue(PBCommentType value) {
  switch (value) {
    case PBCommentTypeToAnswer:
    case PBCommentTypeToFeed:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPBCommentType(PBCommentType value) {
  switch (value) {
    case PBCommentTypeToAnswer:
      return @"PBCommentTypeToAnswer";
    case PBCommentTypeToFeed:
      return @"PBCommentTypeToFeed";
    default:
      return nil;
  }
}

@interface PBComment ()
@property (strong) NSString* commentId;
@property (strong) PBUser* createUser;
@property (strong) NSString* text;
@property BOOL isAnonymous;
@property (strong) NSMutableArray * replyArray;
@property SInt32 createdAt;
@property SInt32 updatedAt;
@end

@implementation PBComment

- (BOOL) hasCommentId {
  return !!hasCommentId_;
}
- (void) setHasCommentId:(BOOL) _value_ {
  hasCommentId_ = !!_value_;
}
@synthesize commentId;
- (BOOL) hasCreateUser {
  return !!hasCreateUser_;
}
- (void) setHasCreateUser:(BOOL) _value_ {
  hasCreateUser_ = !!_value_;
}
@synthesize createUser;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
- (BOOL) hasIsAnonymous {
  return !!hasIsAnonymous_;
}
- (void) setHasIsAnonymous:(BOOL) _value_ {
  hasIsAnonymous_ = !!_value_;
}
- (BOOL) isAnonymous {
  return !!isAnonymous_;
}
- (void) setIsAnonymous:(BOOL) _value_ {
  isAnonymous_ = !!_value_;
}
@synthesize replyArray;
@dynamic reply;
- (BOOL) hasCreatedAt {
  return !!hasCreatedAt_;
}
- (void) setHasCreatedAt:(BOOL) _value_ {
  hasCreatedAt_ = !!_value_;
}
@synthesize createdAt;
- (BOOL) hasUpdatedAt {
  return !!hasUpdatedAt_;
}
- (void) setHasUpdatedAt:(BOOL) _value_ {
  hasUpdatedAt_ = !!_value_;
}
@synthesize updatedAt;
- (instancetype) init {
  if ((self = [super init])) {
    self.commentId = @"";
    self.createUser = [PBUser defaultInstance];
    self.text = @"";
    self.isAnonymous = NO;
    self.createdAt = 0;
    self.updatedAt = 0;
  }
  return self;
}
static PBComment* defaultPBCommentInstance = nil;
+ (void) initialize {
  if (self == [PBComment class]) {
    defaultPBCommentInstance = [[PBComment alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCommentInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCommentInstance;
}
- (NSArray *)reply {
  return replyArray;
}
- (PBComment*)replyAtIndex:(NSUInteger)index {
  return [replyArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasCreateUser) {
    if (!self.createUser.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitreply = YES;
   [self.reply enumerateObjectsUsingBlock:^(PBComment *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitreply = NO;
      *stop = YES;
    }
  }];
  if (!isInitreply) return isInitreply;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCommentId) {
    [output writeString:1 value:self.commentId];
  }
  if (self.hasCreateUser) {
    [output writeMessage:2 value:self.createUser];
  }
  if (self.hasText) {
    [output writeString:3 value:self.text];
  }
  if (self.hasIsAnonymous) {
    [output writeBool:4 value:self.isAnonymous];
  }
  [self.replyArray enumerateObjectsUsingBlock:^(PBComment *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  if (self.hasCreatedAt) {
    [output writeInt32:40 value:self.createdAt];
  }
  if (self.hasUpdatedAt) {
    [output writeInt32:41 value:self.updatedAt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCommentId) {
    size_ += computeStringSize(1, self.commentId);
  }
  if (self.hasCreateUser) {
    size_ += computeMessageSize(2, self.createUser);
  }
  if (self.hasText) {
    size_ += computeStringSize(3, self.text);
  }
  if (self.hasIsAnonymous) {
    size_ += computeBoolSize(4, self.isAnonymous);
  }
  [self.replyArray enumerateObjectsUsingBlock:^(PBComment *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  if (self.hasCreatedAt) {
    size_ += computeInt32Size(40, self.createdAt);
  }
  if (self.hasUpdatedAt) {
    size_ += computeInt32Size(41, self.updatedAt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBComment*) parseFromData:(NSData*) data {
  return (PBComment*)[[[PBComment builder] mergeFromData:data] build];
}
+ (PBComment*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBComment*)[[[PBComment builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBComment*) parseFromInputStream:(NSInputStream*) input {
  return (PBComment*)[[[PBComment builder] mergeFromInputStream:input] build];
}
+ (PBComment*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBComment*)[[[PBComment builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBComment*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBComment*)[[[PBComment builder] mergeFromCodedInputStream:input] build];
}
+ (PBComment*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBComment*)[[[PBComment builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCommentBuilder*) builder {
  return [[PBCommentBuilder alloc] init];
}
+ (PBCommentBuilder*) builderWithPrototype:(PBComment*) prototype {
  return [[PBComment builder] mergeFrom:prototype];
}
- (PBCommentBuilder*) builder {
  return [PBComment builder];
}
- (PBCommentBuilder*) toBuilder {
  return [PBComment builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCommentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"commentId", self.commentId];
  }
  if (self.hasCreateUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"createUser"];
    [self.createUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasIsAnonymous) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAnonymous", [NSNumber numberWithBool:self.isAnonymous]];
  }
  [self.replyArray enumerateObjectsUsingBlock:^(PBComment *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"reply"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasCreatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdAt", [NSNumber numberWithInteger:self.createdAt]];
  }
  if (self.hasUpdatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updatedAt", [NSNumber numberWithInteger:self.updatedAt]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBComment class]]) {
    return NO;
  }
  PBComment *otherMessage = other;
  return
      self.hasCommentId == otherMessage.hasCommentId &&
      (!self.hasCommentId || [self.commentId isEqual:otherMessage.commentId]) &&
      self.hasCreateUser == otherMessage.hasCreateUser &&
      (!self.hasCreateUser || [self.createUser isEqual:otherMessage.createUser]) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasIsAnonymous == otherMessage.hasIsAnonymous &&
      (!self.hasIsAnonymous || self.isAnonymous == otherMessage.isAnonymous) &&
      [self.replyArray isEqualToArray:otherMessage.replyArray] &&
      self.hasCreatedAt == otherMessage.hasCreatedAt &&
      (!self.hasCreatedAt || self.createdAt == otherMessage.createdAt) &&
      self.hasUpdatedAt == otherMessage.hasUpdatedAt &&
      (!self.hasUpdatedAt || self.updatedAt == otherMessage.updatedAt) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCommentId) {
    hashCode = hashCode * 31 + [self.commentId hash];
  }
  if (self.hasCreateUser) {
    hashCode = hashCode * 31 + [self.createUser hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasIsAnonymous) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isAnonymous] hash];
  }
  [self.replyArray enumerateObjectsUsingBlock:^(PBComment *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasCreatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createdAt] hash];
  }
  if (self.hasUpdatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.updatedAt] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCommentBuilder()
@property (strong) PBComment* resultPbcomment;
@end

@implementation PBCommentBuilder
@synthesize resultPbcomment;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcomment = [[PBComment alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcomment;
}
- (PBCommentBuilder*) clear {
  self.resultPbcomment = [[PBComment alloc] init];
  return self;
}
- (PBCommentBuilder*) clone {
  return [PBComment builderWithPrototype:resultPbcomment];
}
- (PBComment*) defaultInstance {
  return [PBComment defaultInstance];
}
- (PBComment*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBComment*) buildPartial {
  PBComment* returnMe = resultPbcomment;
  self.resultPbcomment = nil;
  return returnMe;
}
- (PBCommentBuilder*) mergeFrom:(PBComment*) other {
  if (other == [PBComment defaultInstance]) {
    return self;
  }
  if (other.hasCommentId) {
    [self setCommentId:other.commentId];
  }
  if (other.hasCreateUser) {
    [self mergeCreateUser:other.createUser];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasIsAnonymous) {
    [self setIsAnonymous:other.isAnonymous];
  }
  if (other.replyArray.count > 0) {
    if (resultPbcomment.replyArray == nil) {
      resultPbcomment.replyArray = [[NSMutableArray alloc] initWithArray:other.replyArray];
    } else {
      [resultPbcomment.replyArray addObjectsFromArray:other.replyArray];
    }
  }
  if (other.hasCreatedAt) {
    [self setCreatedAt:other.createdAt];
  }
  if (other.hasUpdatedAt) {
    [self setUpdatedAt:other.updatedAt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCommentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCommentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCommentId:[input readString]];
        break;
      }
      case 18: {
        PBUserBuilder* subBuilder = [PBUser builder];
        if (self.hasCreateUser) {
          [subBuilder mergeFrom:self.createUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreateUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setText:[input readString]];
        break;
      }
      case 32: {
        [self setIsAnonymous:[input readBool]];
        break;
      }
      case 42: {
        PBCommentBuilder* subBuilder = [PBComment builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addReply:[subBuilder buildPartial]];
        break;
      }
      case 320: {
        [self setCreatedAt:[input readInt32]];
        break;
      }
      case 328: {
        [self setUpdatedAt:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCommentId {
  return resultPbcomment.hasCommentId;
}
- (NSString*) commentId {
  return resultPbcomment.commentId;
}
- (PBCommentBuilder*) setCommentId:(NSString*) value {
  resultPbcomment.hasCommentId = YES;
  resultPbcomment.commentId = value;
  return self;
}
- (PBCommentBuilder*) clearCommentId {
  resultPbcomment.hasCommentId = NO;
  resultPbcomment.commentId = @"";
  return self;
}
- (BOOL) hasCreateUser {
  return resultPbcomment.hasCreateUser;
}
- (PBUser*) createUser {
  return resultPbcomment.createUser;
}
- (PBCommentBuilder*) setCreateUser:(PBUser*) value {
  resultPbcomment.hasCreateUser = YES;
  resultPbcomment.createUser = value;
  return self;
}
- (PBCommentBuilder*) setCreateUserBuilder:(PBUserBuilder*) builderForValue {
  return [self setCreateUser:[builderForValue build]];
}
- (PBCommentBuilder*) mergeCreateUser:(PBUser*) value {
  if (resultPbcomment.hasCreateUser &&
      resultPbcomment.createUser != [PBUser defaultInstance]) {
    resultPbcomment.createUser =
      [[[PBUser builderWithPrototype:resultPbcomment.createUser] mergeFrom:value] buildPartial];
  } else {
    resultPbcomment.createUser = value;
  }
  resultPbcomment.hasCreateUser = YES;
  return self;
}
- (PBCommentBuilder*) clearCreateUser {
  resultPbcomment.hasCreateUser = NO;
  resultPbcomment.createUser = [PBUser defaultInstance];
  return self;
}
- (BOOL) hasText {
  return resultPbcomment.hasText;
}
- (NSString*) text {
  return resultPbcomment.text;
}
- (PBCommentBuilder*) setText:(NSString*) value {
  resultPbcomment.hasText = YES;
  resultPbcomment.text = value;
  return self;
}
- (PBCommentBuilder*) clearText {
  resultPbcomment.hasText = NO;
  resultPbcomment.text = @"";
  return self;
}
- (BOOL) hasIsAnonymous {
  return resultPbcomment.hasIsAnonymous;
}
- (BOOL) isAnonymous {
  return resultPbcomment.isAnonymous;
}
- (PBCommentBuilder*) setIsAnonymous:(BOOL) value {
  resultPbcomment.hasIsAnonymous = YES;
  resultPbcomment.isAnonymous = value;
  return self;
}
- (PBCommentBuilder*) clearIsAnonymous {
  resultPbcomment.hasIsAnonymous = NO;
  resultPbcomment.isAnonymous = NO;
  return self;
}
- (NSMutableArray *)reply {
  return resultPbcomment.replyArray;
}
- (PBComment*)replyAtIndex:(NSUInteger)index {
  return [resultPbcomment replyAtIndex:index];
}
- (PBCommentBuilder *)addReply:(PBComment*)value {
  if (resultPbcomment.replyArray == nil) {
    resultPbcomment.replyArray = [[NSMutableArray alloc]init];
  }
  [resultPbcomment.replyArray addObject:value];
  return self;
}
- (PBCommentBuilder *)setReplyArray:(NSArray *)array {
  resultPbcomment.replyArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBCommentBuilder *)clearReply {
  resultPbcomment.replyArray = nil;
  return self;
}
- (BOOL) hasCreatedAt {
  return resultPbcomment.hasCreatedAt;
}
- (SInt32) createdAt {
  return resultPbcomment.createdAt;
}
- (PBCommentBuilder*) setCreatedAt:(SInt32) value {
  resultPbcomment.hasCreatedAt = YES;
  resultPbcomment.createdAt = value;
  return self;
}
- (PBCommentBuilder*) clearCreatedAt {
  resultPbcomment.hasCreatedAt = NO;
  resultPbcomment.createdAt = 0;
  return self;
}
- (BOOL) hasUpdatedAt {
  return resultPbcomment.hasUpdatedAt;
}
- (SInt32) updatedAt {
  return resultPbcomment.updatedAt;
}
- (PBCommentBuilder*) setUpdatedAt:(SInt32) value {
  resultPbcomment.hasUpdatedAt = YES;
  resultPbcomment.updatedAt = value;
  return self;
}
- (PBCommentBuilder*) clearUpdatedAt {
  resultPbcomment.hasUpdatedAt = NO;
  resultPbcomment.updatedAt = 0;
  return self;
}
@end

@interface PBAnswer ()
@property (strong) NSString* answerId;
@property (strong) PBUser* creatUser;
@property BOOL isAnonymous;
@property (strong) NSString* text;
@property (strong) PBComment* comment;
@property SInt32 thanksCount;
@property SInt32 createdAt;
@property SInt32 updatedAt;
@end

@implementation PBAnswer

- (BOOL) hasAnswerId {
  return !!hasAnswerId_;
}
- (void) setHasAnswerId:(BOOL) _value_ {
  hasAnswerId_ = !!_value_;
}
@synthesize answerId;
- (BOOL) hasCreatUser {
  return !!hasCreatUser_;
}
- (void) setHasCreatUser:(BOOL) _value_ {
  hasCreatUser_ = !!_value_;
}
@synthesize creatUser;
- (BOOL) hasIsAnonymous {
  return !!hasIsAnonymous_;
}
- (void) setHasIsAnonymous:(BOOL) _value_ {
  hasIsAnonymous_ = !!_value_;
}
- (BOOL) isAnonymous {
  return !!isAnonymous_;
}
- (void) setIsAnonymous:(BOOL) _value_ {
  isAnonymous_ = !!_value_;
}
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) _value_ {
  hasComment_ = !!_value_;
}
@synthesize comment;
- (BOOL) hasThanksCount {
  return !!hasThanksCount_;
}
- (void) setHasThanksCount:(BOOL) _value_ {
  hasThanksCount_ = !!_value_;
}
@synthesize thanksCount;
- (BOOL) hasCreatedAt {
  return !!hasCreatedAt_;
}
- (void) setHasCreatedAt:(BOOL) _value_ {
  hasCreatedAt_ = !!_value_;
}
@synthesize createdAt;
- (BOOL) hasUpdatedAt {
  return !!hasUpdatedAt_;
}
- (void) setHasUpdatedAt:(BOOL) _value_ {
  hasUpdatedAt_ = !!_value_;
}
@synthesize updatedAt;
- (instancetype) init {
  if ((self = [super init])) {
    self.answerId = @"";
    self.creatUser = [PBUser defaultInstance];
    self.isAnonymous = NO;
    self.text = @"";
    self.comment = [PBComment defaultInstance];
    self.thanksCount = 0;
    self.createdAt = 0;
    self.updatedAt = 0;
  }
  return self;
}
static PBAnswer* defaultPBAnswerInstance = nil;
+ (void) initialize {
  if (self == [PBAnswer class]) {
    defaultPBAnswerInstance = [[PBAnswer alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBAnswerInstance;
}
- (instancetype) defaultInstance {
  return defaultPBAnswerInstance;
}
- (BOOL) isInitialized {
  if (self.hasCreatUser) {
    if (!self.creatUser.isInitialized) {
      return NO;
    }
  }
  if (self.hasComment) {
    if (!self.comment.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAnswerId) {
    [output writeString:1 value:self.answerId];
  }
  if (self.hasCreatUser) {
    [output writeMessage:2 value:self.creatUser];
  }
  if (self.hasIsAnonymous) {
    [output writeBool:5 value:self.isAnonymous];
  }
  if (self.hasText) {
    [output writeString:10 value:self.text];
  }
  if (self.hasComment) {
    [output writeMessage:20 value:self.comment];
  }
  if (self.hasThanksCount) {
    [output writeInt32:21 value:self.thanksCount];
  }
  if (self.hasCreatedAt) {
    [output writeInt32:40 value:self.createdAt];
  }
  if (self.hasUpdatedAt) {
    [output writeInt32:41 value:self.updatedAt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAnswerId) {
    size_ += computeStringSize(1, self.answerId);
  }
  if (self.hasCreatUser) {
    size_ += computeMessageSize(2, self.creatUser);
  }
  if (self.hasIsAnonymous) {
    size_ += computeBoolSize(5, self.isAnonymous);
  }
  if (self.hasText) {
    size_ += computeStringSize(10, self.text);
  }
  if (self.hasComment) {
    size_ += computeMessageSize(20, self.comment);
  }
  if (self.hasThanksCount) {
    size_ += computeInt32Size(21, self.thanksCount);
  }
  if (self.hasCreatedAt) {
    size_ += computeInt32Size(40, self.createdAt);
  }
  if (self.hasUpdatedAt) {
    size_ += computeInt32Size(41, self.updatedAt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBAnswer*) parseFromData:(NSData*) data {
  return (PBAnswer*)[[[PBAnswer builder] mergeFromData:data] build];
}
+ (PBAnswer*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBAnswer*)[[[PBAnswer builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBAnswer*) parseFromInputStream:(NSInputStream*) input {
  return (PBAnswer*)[[[PBAnswer builder] mergeFromInputStream:input] build];
}
+ (PBAnswer*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBAnswer*)[[[PBAnswer builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBAnswer*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBAnswer*)[[[PBAnswer builder] mergeFromCodedInputStream:input] build];
}
+ (PBAnswer*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBAnswer*)[[[PBAnswer builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBAnswerBuilder*) builder {
  return [[PBAnswerBuilder alloc] init];
}
+ (PBAnswerBuilder*) builderWithPrototype:(PBAnswer*) prototype {
  return [[PBAnswer builder] mergeFrom:prototype];
}
- (PBAnswerBuilder*) builder {
  return [PBAnswer builder];
}
- (PBAnswerBuilder*) toBuilder {
  return [PBAnswer builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAnswerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"answerId", self.answerId];
  }
  if (self.hasCreatUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"creatUser"];
    [self.creatUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasIsAnonymous) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAnonymous", [NSNumber numberWithBool:self.isAnonymous]];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@ {\n", indent, @"comment"];
    [self.comment writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasThanksCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"thanksCount", [NSNumber numberWithInteger:self.thanksCount]];
  }
  if (self.hasCreatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdAt", [NSNumber numberWithInteger:self.createdAt]];
  }
  if (self.hasUpdatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updatedAt", [NSNumber numberWithInteger:self.updatedAt]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBAnswer class]]) {
    return NO;
  }
  PBAnswer *otherMessage = other;
  return
      self.hasAnswerId == otherMessage.hasAnswerId &&
      (!self.hasAnswerId || [self.answerId isEqual:otherMessage.answerId]) &&
      self.hasCreatUser == otherMessage.hasCreatUser &&
      (!self.hasCreatUser || [self.creatUser isEqual:otherMessage.creatUser]) &&
      self.hasIsAnonymous == otherMessage.hasIsAnonymous &&
      (!self.hasIsAnonymous || self.isAnonymous == otherMessage.isAnonymous) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasThanksCount == otherMessage.hasThanksCount &&
      (!self.hasThanksCount || self.thanksCount == otherMessage.thanksCount) &&
      self.hasCreatedAt == otherMessage.hasCreatedAt &&
      (!self.hasCreatedAt || self.createdAt == otherMessage.createdAt) &&
      self.hasUpdatedAt == otherMessage.hasUpdatedAt &&
      (!self.hasUpdatedAt || self.updatedAt == otherMessage.updatedAt) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAnswerId) {
    hashCode = hashCode * 31 + [self.answerId hash];
  }
  if (self.hasCreatUser) {
    hashCode = hashCode * 31 + [self.creatUser hash];
  }
  if (self.hasIsAnonymous) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isAnonymous] hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasThanksCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.thanksCount] hash];
  }
  if (self.hasCreatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createdAt] hash];
  }
  if (self.hasUpdatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.updatedAt] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBAnswerBuilder()
@property (strong) PBAnswer* resultPbanswer;
@end

@implementation PBAnswerBuilder
@synthesize resultPbanswer;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbanswer = [[PBAnswer alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbanswer;
}
- (PBAnswerBuilder*) clear {
  self.resultPbanswer = [[PBAnswer alloc] init];
  return self;
}
- (PBAnswerBuilder*) clone {
  return [PBAnswer builderWithPrototype:resultPbanswer];
}
- (PBAnswer*) defaultInstance {
  return [PBAnswer defaultInstance];
}
- (PBAnswer*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBAnswer*) buildPartial {
  PBAnswer* returnMe = resultPbanswer;
  self.resultPbanswer = nil;
  return returnMe;
}
- (PBAnswerBuilder*) mergeFrom:(PBAnswer*) other {
  if (other == [PBAnswer defaultInstance]) {
    return self;
  }
  if (other.hasAnswerId) {
    [self setAnswerId:other.answerId];
  }
  if (other.hasCreatUser) {
    [self mergeCreatUser:other.creatUser];
  }
  if (other.hasIsAnonymous) {
    [self setIsAnonymous:other.isAnonymous];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasComment) {
    [self mergeComment:other.comment];
  }
  if (other.hasThanksCount) {
    [self setThanksCount:other.thanksCount];
  }
  if (other.hasCreatedAt) {
    [self setCreatedAt:other.createdAt];
  }
  if (other.hasUpdatedAt) {
    [self setUpdatedAt:other.updatedAt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBAnswerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBAnswerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAnswerId:[input readString]];
        break;
      }
      case 18: {
        PBUserBuilder* subBuilder = [PBUser builder];
        if (self.hasCreatUser) {
          [subBuilder mergeFrom:self.creatUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreatUser:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setIsAnonymous:[input readBool]];
        break;
      }
      case 82: {
        [self setText:[input readString]];
        break;
      }
      case 162: {
        PBCommentBuilder* subBuilder = [PBComment builder];
        if (self.hasComment) {
          [subBuilder mergeFrom:self.comment];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setComment:[subBuilder buildPartial]];
        break;
      }
      case 168: {
        [self setThanksCount:[input readInt32]];
        break;
      }
      case 320: {
        [self setCreatedAt:[input readInt32]];
        break;
      }
      case 328: {
        [self setUpdatedAt:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAnswerId {
  return resultPbanswer.hasAnswerId;
}
- (NSString*) answerId {
  return resultPbanswer.answerId;
}
- (PBAnswerBuilder*) setAnswerId:(NSString*) value {
  resultPbanswer.hasAnswerId = YES;
  resultPbanswer.answerId = value;
  return self;
}
- (PBAnswerBuilder*) clearAnswerId {
  resultPbanswer.hasAnswerId = NO;
  resultPbanswer.answerId = @"";
  return self;
}
- (BOOL) hasCreatUser {
  return resultPbanswer.hasCreatUser;
}
- (PBUser*) creatUser {
  return resultPbanswer.creatUser;
}
- (PBAnswerBuilder*) setCreatUser:(PBUser*) value {
  resultPbanswer.hasCreatUser = YES;
  resultPbanswer.creatUser = value;
  return self;
}
- (PBAnswerBuilder*) setCreatUserBuilder:(PBUserBuilder*) builderForValue {
  return [self setCreatUser:[builderForValue build]];
}
- (PBAnswerBuilder*) mergeCreatUser:(PBUser*) value {
  if (resultPbanswer.hasCreatUser &&
      resultPbanswer.creatUser != [PBUser defaultInstance]) {
    resultPbanswer.creatUser =
      [[[PBUser builderWithPrototype:resultPbanswer.creatUser] mergeFrom:value] buildPartial];
  } else {
    resultPbanswer.creatUser = value;
  }
  resultPbanswer.hasCreatUser = YES;
  return self;
}
- (PBAnswerBuilder*) clearCreatUser {
  resultPbanswer.hasCreatUser = NO;
  resultPbanswer.creatUser = [PBUser defaultInstance];
  return self;
}
- (BOOL) hasIsAnonymous {
  return resultPbanswer.hasIsAnonymous;
}
- (BOOL) isAnonymous {
  return resultPbanswer.isAnonymous;
}
- (PBAnswerBuilder*) setIsAnonymous:(BOOL) value {
  resultPbanswer.hasIsAnonymous = YES;
  resultPbanswer.isAnonymous = value;
  return self;
}
- (PBAnswerBuilder*) clearIsAnonymous {
  resultPbanswer.hasIsAnonymous = NO;
  resultPbanswer.isAnonymous = NO;
  return self;
}
- (BOOL) hasText {
  return resultPbanswer.hasText;
}
- (NSString*) text {
  return resultPbanswer.text;
}
- (PBAnswerBuilder*) setText:(NSString*) value {
  resultPbanswer.hasText = YES;
  resultPbanswer.text = value;
  return self;
}
- (PBAnswerBuilder*) clearText {
  resultPbanswer.hasText = NO;
  resultPbanswer.text = @"";
  return self;
}
- (BOOL) hasComment {
  return resultPbanswer.hasComment;
}
- (PBComment*) comment {
  return resultPbanswer.comment;
}
- (PBAnswerBuilder*) setComment:(PBComment*) value {
  resultPbanswer.hasComment = YES;
  resultPbanswer.comment = value;
  return self;
}
- (PBAnswerBuilder*) setCommentBuilder:(PBCommentBuilder*) builderForValue {
  return [self setComment:[builderForValue build]];
}
- (PBAnswerBuilder*) mergeComment:(PBComment*) value {
  if (resultPbanswer.hasComment &&
      resultPbanswer.comment != [PBComment defaultInstance]) {
    resultPbanswer.comment =
      [[[PBComment builderWithPrototype:resultPbanswer.comment] mergeFrom:value] buildPartial];
  } else {
    resultPbanswer.comment = value;
  }
  resultPbanswer.hasComment = YES;
  return self;
}
- (PBAnswerBuilder*) clearComment {
  resultPbanswer.hasComment = NO;
  resultPbanswer.comment = [PBComment defaultInstance];
  return self;
}
- (BOOL) hasThanksCount {
  return resultPbanswer.hasThanksCount;
}
- (SInt32) thanksCount {
  return resultPbanswer.thanksCount;
}
- (PBAnswerBuilder*) setThanksCount:(SInt32) value {
  resultPbanswer.hasThanksCount = YES;
  resultPbanswer.thanksCount = value;
  return self;
}
- (PBAnswerBuilder*) clearThanksCount {
  resultPbanswer.hasThanksCount = NO;
  resultPbanswer.thanksCount = 0;
  return self;
}
- (BOOL) hasCreatedAt {
  return resultPbanswer.hasCreatedAt;
}
- (SInt32) createdAt {
  return resultPbanswer.createdAt;
}
- (PBAnswerBuilder*) setCreatedAt:(SInt32) value {
  resultPbanswer.hasCreatedAt = YES;
  resultPbanswer.createdAt = value;
  return self;
}
- (PBAnswerBuilder*) clearCreatedAt {
  resultPbanswer.hasCreatedAt = NO;
  resultPbanswer.createdAt = 0;
  return self;
}
- (BOOL) hasUpdatedAt {
  return resultPbanswer.hasUpdatedAt;
}
- (SInt32) updatedAt {
  return resultPbanswer.updatedAt;
}
- (PBAnswerBuilder*) setUpdatedAt:(SInt32) value {
  resultPbanswer.hasUpdatedAt = YES;
  resultPbanswer.updatedAt = value;
  return self;
}
- (PBAnswerBuilder*) clearUpdatedAt {
  resultPbanswer.hasUpdatedAt = NO;
  resultPbanswer.updatedAt = 0;
  return self;
}
@end

@interface PBFeed ()
@property (strong) NSString* feedId;
@property PBFeedType type;
@property (strong) PBUser* createUser;
@property (strong) NSString* title;
@property BOOL isAnonymous;
@property (strong) NSString* text;
@property SInt32 createdAt;
@property SInt32 updatedAt;
@property PBFeedState state;
@property (strong) NSMutableArray * topicArray;
@property (strong) NSMutableArray * commentArray;
@property (strong) NSMutableArray * blessingArray;
@property (strong) NSMutableArray * answerArray;
@end

@implementation PBFeed

- (BOOL) hasFeedId {
  return !!hasFeedId_;
}
- (void) setHasFeedId:(BOOL) _value_ {
  hasFeedId_ = !!_value_;
}
@synthesize feedId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasCreateUser {
  return !!hasCreateUser_;
}
- (void) setHasCreateUser:(BOOL) _value_ {
  hasCreateUser_ = !!_value_;
}
@synthesize createUser;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasIsAnonymous {
  return !!hasIsAnonymous_;
}
- (void) setHasIsAnonymous:(BOOL) _value_ {
  hasIsAnonymous_ = !!_value_;
}
- (BOOL) isAnonymous {
  return !!isAnonymous_;
}
- (void) setIsAnonymous:(BOOL) _value_ {
  isAnonymous_ = !!_value_;
}
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
- (BOOL) hasCreatedAt {
  return !!hasCreatedAt_;
}
- (void) setHasCreatedAt:(BOOL) _value_ {
  hasCreatedAt_ = !!_value_;
}
@synthesize createdAt;
- (BOOL) hasUpdatedAt {
  return !!hasUpdatedAt_;
}
- (void) setHasUpdatedAt:(BOOL) _value_ {
  hasUpdatedAt_ = !!_value_;
}
@synthesize updatedAt;
- (BOOL) hasState {
  return !!hasState_;
}
- (void) setHasState:(BOOL) _value_ {
  hasState_ = !!_value_;
}
@synthesize state;
@synthesize topicArray;
@dynamic topic;
@synthesize commentArray;
@dynamic comment;
@synthesize blessingArray;
@dynamic blessing;
@synthesize answerArray;
@dynamic answer;
- (instancetype) init {
  if ((self = [super init])) {
    self.feedId = @"";
    self.type = PBFeedTypeWorry;
    self.createUser = [PBUser defaultInstance];
    self.title = @"";
    self.isAnonymous = NO;
    self.text = @"";
    self.createdAt = 0;
    self.updatedAt = 0;
    self.state = PBFeedStateNormal;
  }
  return self;
}
static PBFeed* defaultPBFeedInstance = nil;
+ (void) initialize {
  if (self == [PBFeed class]) {
    defaultPBFeedInstance = [[PBFeed alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBFeedInstance;
}
- (instancetype) defaultInstance {
  return defaultPBFeedInstance;
}
- (NSArray *)topic {
  return topicArray;
}
- (PBTopic*)topicAtIndex:(NSUInteger)index {
  return [topicArray objectAtIndex:index];
}
- (NSArray *)comment {
  return commentArray;
}
- (PBComment*)commentAtIndex:(NSUInteger)index {
  return [commentArray objectAtIndex:index];
}
- (NSArray *)blessing {
  return blessingArray;
}
- (PBBlessing*)blessingAtIndex:(NSUInteger)index {
  return [blessingArray objectAtIndex:index];
}
- (NSArray *)answer {
  return answerArray;
}
- (PBAnswer*)answerAtIndex:(NSUInteger)index {
  return [answerArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasCreateUser) {
    if (!self.createUser.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInittopic = YES;
   [self.topic enumerateObjectsUsingBlock:^(PBTopic *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInittopic = NO;
      *stop = YES;
    }
  }];
  if (!isInittopic) return isInittopic;
  __block BOOL isInitcomment = YES;
   [self.comment enumerateObjectsUsingBlock:^(PBComment *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcomment = NO;
      *stop = YES;
    }
  }];
  if (!isInitcomment) return isInitcomment;
  __block BOOL isInitblessing = YES;
   [self.blessing enumerateObjectsUsingBlock:^(PBBlessing *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitblessing = NO;
      *stop = YES;
    }
  }];
  if (!isInitblessing) return isInitblessing;
  __block BOOL isInitanswer = YES;
   [self.answer enumerateObjectsUsingBlock:^(PBAnswer *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitanswer = NO;
      *stop = YES;
    }
  }];
  if (!isInitanswer) return isInitanswer;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFeedId) {
    [output writeString:1 value:self.feedId];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  if (self.hasCreateUser) {
    [output writeMessage:3 value:self.createUser];
  }
  if (self.hasTitle) {
    [output writeString:4 value:self.title];
  }
  if (self.hasIsAnonymous) {
    [output writeBool:5 value:self.isAnonymous];
  }
  if (self.hasText) {
    [output writeString:41 value:self.text];
  }
  if (self.hasCreatedAt) {
    [output writeInt32:42 value:self.createdAt];
  }
  if (self.hasUpdatedAt) {
    [output writeInt32:43 value:self.updatedAt];
  }
  if (self.hasState) {
    [output writeEnum:44 value:self.state];
  }
  [self.topicArray enumerateObjectsUsingBlock:^(PBTopic *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:50 value:element];
  }];
  [self.commentArray enumerateObjectsUsingBlock:^(PBComment *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:60 value:element];
  }];
  [self.blessingArray enumerateObjectsUsingBlock:^(PBBlessing *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:61 value:element];
  }];
  [self.answerArray enumerateObjectsUsingBlock:^(PBAnswer *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:62 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFeedId) {
    size_ += computeStringSize(1, self.feedId);
  }
  if (self.hasType) {
    size_ += computeEnumSize(2, self.type);
  }
  if (self.hasCreateUser) {
    size_ += computeMessageSize(3, self.createUser);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(4, self.title);
  }
  if (self.hasIsAnonymous) {
    size_ += computeBoolSize(5, self.isAnonymous);
  }
  if (self.hasText) {
    size_ += computeStringSize(41, self.text);
  }
  if (self.hasCreatedAt) {
    size_ += computeInt32Size(42, self.createdAt);
  }
  if (self.hasUpdatedAt) {
    size_ += computeInt32Size(43, self.updatedAt);
  }
  if (self.hasState) {
    size_ += computeEnumSize(44, self.state);
  }
  [self.topicArray enumerateObjectsUsingBlock:^(PBTopic *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(50, element);
  }];
  [self.commentArray enumerateObjectsUsingBlock:^(PBComment *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(60, element);
  }];
  [self.blessingArray enumerateObjectsUsingBlock:^(PBBlessing *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(61, element);
  }];
  [self.answerArray enumerateObjectsUsingBlock:^(PBAnswer *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(62, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFeed*) parseFromData:(NSData*) data {
  return (PBFeed*)[[[PBFeed builder] mergeFromData:data] build];
}
+ (PBFeed*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFeed*) parseFromInputStream:(NSInputStream*) input {
  return (PBFeed*)[[[PBFeed builder] mergeFromInputStream:input] build];
}
+ (PBFeed*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeed*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFeed*)[[[PBFeed builder] mergeFromCodedInputStream:input] build];
}
+ (PBFeed*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFeed*)[[[PBFeed builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFeedBuilder*) builder {
  return [[PBFeedBuilder alloc] init];
}
+ (PBFeedBuilder*) builderWithPrototype:(PBFeed*) prototype {
  return [[PBFeed builder] mergeFrom:prototype];
}
- (PBFeedBuilder*) builder {
  return [PBFeed builder];
}
- (PBFeedBuilder*) toBuilder {
  return [PBFeed builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFeedId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"feedId", self.feedId];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromPBFeedType(self.type)];
  }
  if (self.hasCreateUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"createUser"];
    [self.createUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasIsAnonymous) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAnonymous", [NSNumber numberWithBool:self.isAnonymous]];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasCreatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdAt", [NSNumber numberWithInteger:self.createdAt]];
  }
  if (self.hasUpdatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updatedAt", [NSNumber numberWithInteger:self.updatedAt]];
  }
  if (self.hasState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"state", NSStringFromPBFeedState(self.state)];
  }
  [self.topicArray enumerateObjectsUsingBlock:^(PBTopic *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"topic"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.commentArray enumerateObjectsUsingBlock:^(PBComment *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"comment"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.blessingArray enumerateObjectsUsingBlock:^(PBBlessing *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"blessing"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.answerArray enumerateObjectsUsingBlock:^(PBAnswer *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"answer"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFeed class]]) {
    return NO;
  }
  PBFeed *otherMessage = other;
  return
      self.hasFeedId == otherMessage.hasFeedId &&
      (!self.hasFeedId || [self.feedId isEqual:otherMessage.feedId]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasCreateUser == otherMessage.hasCreateUser &&
      (!self.hasCreateUser || [self.createUser isEqual:otherMessage.createUser]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasIsAnonymous == otherMessage.hasIsAnonymous &&
      (!self.hasIsAnonymous || self.isAnonymous == otherMessage.isAnonymous) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasCreatedAt == otherMessage.hasCreatedAt &&
      (!self.hasCreatedAt || self.createdAt == otherMessage.createdAt) &&
      self.hasUpdatedAt == otherMessage.hasUpdatedAt &&
      (!self.hasUpdatedAt || self.updatedAt == otherMessage.updatedAt) &&
      self.hasState == otherMessage.hasState &&
      (!self.hasState || self.state == otherMessage.state) &&
      [self.topicArray isEqualToArray:otherMessage.topicArray] &&
      [self.commentArray isEqualToArray:otherMessage.commentArray] &&
      [self.blessingArray isEqualToArray:otherMessage.blessingArray] &&
      [self.answerArray isEqualToArray:otherMessage.answerArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFeedId) {
    hashCode = hashCode * 31 + [self.feedId hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasCreateUser) {
    hashCode = hashCode * 31 + [self.createUser hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasIsAnonymous) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isAnonymous] hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasCreatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createdAt] hash];
  }
  if (self.hasUpdatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.updatedAt] hash];
  }
  if (self.hasState) {
    hashCode = hashCode * 31 + self.state;
  }
  [self.topicArray enumerateObjectsUsingBlock:^(PBTopic *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.commentArray enumerateObjectsUsingBlock:^(PBComment *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.blessingArray enumerateObjectsUsingBlock:^(PBBlessing *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.answerArray enumerateObjectsUsingBlock:^(PBAnswer *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFeedBuilder()
@property (strong) PBFeed* resultPbfeed;
@end

@implementation PBFeedBuilder
@synthesize resultPbfeed;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbfeed = [[PBFeed alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbfeed;
}
- (PBFeedBuilder*) clear {
  self.resultPbfeed = [[PBFeed alloc] init];
  return self;
}
- (PBFeedBuilder*) clone {
  return [PBFeed builderWithPrototype:resultPbfeed];
}
- (PBFeed*) defaultInstance {
  return [PBFeed defaultInstance];
}
- (PBFeed*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFeed*) buildPartial {
  PBFeed* returnMe = resultPbfeed;
  self.resultPbfeed = nil;
  return returnMe;
}
- (PBFeedBuilder*) mergeFrom:(PBFeed*) other {
  if (other == [PBFeed defaultInstance]) {
    return self;
  }
  if (other.hasFeedId) {
    [self setFeedId:other.feedId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasCreateUser) {
    [self mergeCreateUser:other.createUser];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasIsAnonymous) {
    [self setIsAnonymous:other.isAnonymous];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasCreatedAt) {
    [self setCreatedAt:other.createdAt];
  }
  if (other.hasUpdatedAt) {
    [self setUpdatedAt:other.updatedAt];
  }
  if (other.hasState) {
    [self setState:other.state];
  }
  if (other.topicArray.count > 0) {
    if (resultPbfeed.topicArray == nil) {
      resultPbfeed.topicArray = [[NSMutableArray alloc] initWithArray:other.topicArray];
    } else {
      [resultPbfeed.topicArray addObjectsFromArray:other.topicArray];
    }
  }
  if (other.commentArray.count > 0) {
    if (resultPbfeed.commentArray == nil) {
      resultPbfeed.commentArray = [[NSMutableArray alloc] initWithArray:other.commentArray];
    } else {
      [resultPbfeed.commentArray addObjectsFromArray:other.commentArray];
    }
  }
  if (other.blessingArray.count > 0) {
    if (resultPbfeed.blessingArray == nil) {
      resultPbfeed.blessingArray = [[NSMutableArray alloc] initWithArray:other.blessingArray];
    } else {
      [resultPbfeed.blessingArray addObjectsFromArray:other.blessingArray];
    }
  }
  if (other.answerArray.count > 0) {
    if (resultPbfeed.answerArray == nil) {
      resultPbfeed.answerArray = [[NSMutableArray alloc] initWithArray:other.answerArray];
    } else {
      [resultPbfeed.answerArray addObjectsFromArray:other.answerArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFeedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFeedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFeedId:[input readString]];
        break;
      }
      case 16: {
        PBFeedType value = (PBFeedType)[input readEnum];
        if (PBFeedTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        PBUserBuilder* subBuilder = [PBUser builder];
        if (self.hasCreateUser) {
          [subBuilder mergeFrom:self.createUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreateUser:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setTitle:[input readString]];
        break;
      }
      case 40: {
        [self setIsAnonymous:[input readBool]];
        break;
      }
      case 330: {
        [self setText:[input readString]];
        break;
      }
      case 336: {
        [self setCreatedAt:[input readInt32]];
        break;
      }
      case 344: {
        [self setUpdatedAt:[input readInt32]];
        break;
      }
      case 352: {
        PBFeedState value = (PBFeedState)[input readEnum];
        if (PBFeedStateIsValidValue(value)) {
          [self setState:value];
        } else {
          [unknownFields mergeVarintField:44 value:value];
        }
        break;
      }
      case 402: {
        PBTopicBuilder* subBuilder = [PBTopic builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTopic:[subBuilder buildPartial]];
        break;
      }
      case 482: {
        PBCommentBuilder* subBuilder = [PBComment builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addComment:[subBuilder buildPartial]];
        break;
      }
      case 490: {
        PBBlessingBuilder* subBuilder = [PBBlessing builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBlessing:[subBuilder buildPartial]];
        break;
      }
      case 498: {
        PBAnswerBuilder* subBuilder = [PBAnswer builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAnswer:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasFeedId {
  return resultPbfeed.hasFeedId;
}
- (NSString*) feedId {
  return resultPbfeed.feedId;
}
- (PBFeedBuilder*) setFeedId:(NSString*) value {
  resultPbfeed.hasFeedId = YES;
  resultPbfeed.feedId = value;
  return self;
}
- (PBFeedBuilder*) clearFeedId {
  resultPbfeed.hasFeedId = NO;
  resultPbfeed.feedId = @"";
  return self;
}
- (BOOL) hasType {
  return resultPbfeed.hasType;
}
- (PBFeedType) type {
  return resultPbfeed.type;
}
- (PBFeedBuilder*) setType:(PBFeedType) value {
  resultPbfeed.hasType = YES;
  resultPbfeed.type = value;
  return self;
}
- (PBFeedBuilder*) clearType {
  resultPbfeed.hasType = NO;
  resultPbfeed.type = PBFeedTypeWorry;
  return self;
}
- (BOOL) hasCreateUser {
  return resultPbfeed.hasCreateUser;
}
- (PBUser*) createUser {
  return resultPbfeed.createUser;
}
- (PBFeedBuilder*) setCreateUser:(PBUser*) value {
  resultPbfeed.hasCreateUser = YES;
  resultPbfeed.createUser = value;
  return self;
}
- (PBFeedBuilder*) setCreateUserBuilder:(PBUserBuilder*) builderForValue {
  return [self setCreateUser:[builderForValue build]];
}
- (PBFeedBuilder*) mergeCreateUser:(PBUser*) value {
  if (resultPbfeed.hasCreateUser &&
      resultPbfeed.createUser != [PBUser defaultInstance]) {
    resultPbfeed.createUser =
      [[[PBUser builderWithPrototype:resultPbfeed.createUser] mergeFrom:value] buildPartial];
  } else {
    resultPbfeed.createUser = value;
  }
  resultPbfeed.hasCreateUser = YES;
  return self;
}
- (PBFeedBuilder*) clearCreateUser {
  resultPbfeed.hasCreateUser = NO;
  resultPbfeed.createUser = [PBUser defaultInstance];
  return self;
}
- (BOOL) hasTitle {
  return resultPbfeed.hasTitle;
}
- (NSString*) title {
  return resultPbfeed.title;
}
- (PBFeedBuilder*) setTitle:(NSString*) value {
  resultPbfeed.hasTitle = YES;
  resultPbfeed.title = value;
  return self;
}
- (PBFeedBuilder*) clearTitle {
  resultPbfeed.hasTitle = NO;
  resultPbfeed.title = @"";
  return self;
}
- (BOOL) hasIsAnonymous {
  return resultPbfeed.hasIsAnonymous;
}
- (BOOL) isAnonymous {
  return resultPbfeed.isAnonymous;
}
- (PBFeedBuilder*) setIsAnonymous:(BOOL) value {
  resultPbfeed.hasIsAnonymous = YES;
  resultPbfeed.isAnonymous = value;
  return self;
}
- (PBFeedBuilder*) clearIsAnonymous {
  resultPbfeed.hasIsAnonymous = NO;
  resultPbfeed.isAnonymous = NO;
  return self;
}
- (BOOL) hasText {
  return resultPbfeed.hasText;
}
- (NSString*) text {
  return resultPbfeed.text;
}
- (PBFeedBuilder*) setText:(NSString*) value {
  resultPbfeed.hasText = YES;
  resultPbfeed.text = value;
  return self;
}
- (PBFeedBuilder*) clearText {
  resultPbfeed.hasText = NO;
  resultPbfeed.text = @"";
  return self;
}
- (BOOL) hasCreatedAt {
  return resultPbfeed.hasCreatedAt;
}
- (SInt32) createdAt {
  return resultPbfeed.createdAt;
}
- (PBFeedBuilder*) setCreatedAt:(SInt32) value {
  resultPbfeed.hasCreatedAt = YES;
  resultPbfeed.createdAt = value;
  return self;
}
- (PBFeedBuilder*) clearCreatedAt {
  resultPbfeed.hasCreatedAt = NO;
  resultPbfeed.createdAt = 0;
  return self;
}
- (BOOL) hasUpdatedAt {
  return resultPbfeed.hasUpdatedAt;
}
- (SInt32) updatedAt {
  return resultPbfeed.updatedAt;
}
- (PBFeedBuilder*) setUpdatedAt:(SInt32) value {
  resultPbfeed.hasUpdatedAt = YES;
  resultPbfeed.updatedAt = value;
  return self;
}
- (PBFeedBuilder*) clearUpdatedAt {
  resultPbfeed.hasUpdatedAt = NO;
  resultPbfeed.updatedAt = 0;
  return self;
}
- (BOOL) hasState {
  return resultPbfeed.hasState;
}
- (PBFeedState) state {
  return resultPbfeed.state;
}
- (PBFeedBuilder*) setState:(PBFeedState) value {
  resultPbfeed.hasState = YES;
  resultPbfeed.state = value;
  return self;
}
- (PBFeedBuilder*) clearState {
  resultPbfeed.hasState = NO;
  resultPbfeed.state = PBFeedStateNormal;
  return self;
}
- (NSMutableArray *)topic {
  return resultPbfeed.topicArray;
}
- (PBTopic*)topicAtIndex:(NSUInteger)index {
  return [resultPbfeed topicAtIndex:index];
}
- (PBFeedBuilder *)addTopic:(PBTopic*)value {
  if (resultPbfeed.topicArray == nil) {
    resultPbfeed.topicArray = [[NSMutableArray alloc]init];
  }
  [resultPbfeed.topicArray addObject:value];
  return self;
}
- (PBFeedBuilder *)setTopicArray:(NSArray *)array {
  resultPbfeed.topicArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFeedBuilder *)clearTopic {
  resultPbfeed.topicArray = nil;
  return self;
}
- (NSMutableArray *)comment {
  return resultPbfeed.commentArray;
}
- (PBComment*)commentAtIndex:(NSUInteger)index {
  return [resultPbfeed commentAtIndex:index];
}
- (PBFeedBuilder *)addComment:(PBComment*)value {
  if (resultPbfeed.commentArray == nil) {
    resultPbfeed.commentArray = [[NSMutableArray alloc]init];
  }
  [resultPbfeed.commentArray addObject:value];
  return self;
}
- (PBFeedBuilder *)setCommentArray:(NSArray *)array {
  resultPbfeed.commentArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFeedBuilder *)clearComment {
  resultPbfeed.commentArray = nil;
  return self;
}
- (NSMutableArray *)blessing {
  return resultPbfeed.blessingArray;
}
- (PBBlessing*)blessingAtIndex:(NSUInteger)index {
  return [resultPbfeed blessingAtIndex:index];
}
- (PBFeedBuilder *)addBlessing:(PBBlessing*)value {
  if (resultPbfeed.blessingArray == nil) {
    resultPbfeed.blessingArray = [[NSMutableArray alloc]init];
  }
  [resultPbfeed.blessingArray addObject:value];
  return self;
}
- (PBFeedBuilder *)setBlessingArray:(NSArray *)array {
  resultPbfeed.blessingArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFeedBuilder *)clearBlessing {
  resultPbfeed.blessingArray = nil;
  return self;
}
- (NSMutableArray *)answer {
  return resultPbfeed.answerArray;
}
- (PBAnswer*)answerAtIndex:(NSUInteger)index {
  return [resultPbfeed answerAtIndex:index];
}
- (PBFeedBuilder *)addAnswer:(PBAnswer*)value {
  if (resultPbfeed.answerArray == nil) {
    resultPbfeed.answerArray = [[NSMutableArray alloc]init];
  }
  [resultPbfeed.answerArray addObject:value];
  return self;
}
- (PBFeedBuilder *)setAnswerArray:(NSArray *)array {
  resultPbfeed.answerArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFeedBuilder *)clearAnswer {
  resultPbfeed.answerArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
