// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Topic.pb.h"
// @@protoc_insertion_point(imports)

@implementation TopicRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TopicRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PBTopic ()
@property (strong) NSString* topicId;
@property (strong) NSString* title;
@property (strong) PBUser* creatUser;
@property (strong) NSMutableArray * followersArray;
@property SInt32 followersCount;
@property (strong) NSString* icon;
@property (strong) NSMutableArray * feedIdArray;
@property SInt32 createdAt;
@property SInt32 updatedAt;
@end

@implementation PBTopic

- (BOOL) hasTopicId {
  return !!hasTopicId_;
}
- (void) setHasTopicId:(BOOL) _value_ {
  hasTopicId_ = !!_value_;
}
@synthesize topicId;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasCreatUser {
  return !!hasCreatUser_;
}
- (void) setHasCreatUser:(BOOL) _value_ {
  hasCreatUser_ = !!_value_;
}
@synthesize creatUser;
@synthesize followersArray;
@dynamic followers;
- (BOOL) hasFollowersCount {
  return !!hasFollowersCount_;
}
- (void) setHasFollowersCount:(BOOL) _value_ {
  hasFollowersCount_ = !!_value_;
}
@synthesize followersCount;
- (BOOL) hasIcon {
  return !!hasIcon_;
}
- (void) setHasIcon:(BOOL) _value_ {
  hasIcon_ = !!_value_;
}
@synthesize icon;
@synthesize feedIdArray;
@dynamic feedId;
- (BOOL) hasCreatedAt {
  return !!hasCreatedAt_;
}
- (void) setHasCreatedAt:(BOOL) _value_ {
  hasCreatedAt_ = !!_value_;
}
@synthesize createdAt;
- (BOOL) hasUpdatedAt {
  return !!hasUpdatedAt_;
}
- (void) setHasUpdatedAt:(BOOL) _value_ {
  hasUpdatedAt_ = !!_value_;
}
@synthesize updatedAt;
- (instancetype) init {
  if ((self = [super init])) {
    self.topicId = @"";
    self.title = @"";
    self.creatUser = [PBUser defaultInstance];
    self.followersCount = 0;
    self.icon = @"";
    self.createdAt = 0;
    self.updatedAt = 0;
  }
  return self;
}
static PBTopic* defaultPBTopicInstance = nil;
+ (void) initialize {
  if (self == [PBTopic class]) {
    defaultPBTopicInstance = [[PBTopic alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBTopicInstance;
}
- (instancetype) defaultInstance {
  return defaultPBTopicInstance;
}
- (NSArray *)followers {
  return followersArray;
}
- (PBUser*)followersAtIndex:(NSUInteger)index {
  return [followersArray objectAtIndex:index];
}
- (NSArray *)feedId {
  return feedIdArray;
}
- (NSString*)feedIdAtIndex:(NSUInteger)index {
  return [feedIdArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasCreatUser) {
    if (!self.creatUser.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitfollowers = YES;
   [self.followers enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitfollowers = NO;
      *stop = YES;
    }
  }];
  if (!isInitfollowers) return isInitfollowers;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTopicId) {
    [output writeString:1 value:self.topicId];
  }
  if (self.hasTitle) {
    [output writeString:2 value:self.title];
  }
  if (self.hasCreatUser) {
    [output writeMessage:4 value:self.creatUser];
  }
  [self.followersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  if (self.hasFollowersCount) {
    [output writeInt32:11 value:self.followersCount];
  }
  if (self.hasIcon) {
    [output writeString:20 value:self.icon];
  }
  [self.feedIdArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:30 value:element];
  }];
  if (self.hasCreatedAt) {
    [output writeInt32:40 value:self.createdAt];
  }
  if (self.hasUpdatedAt) {
    [output writeInt32:41 value:self.updatedAt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTopicId) {
    size_ += computeStringSize(1, self.topicId);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(2, self.title);
  }
  if (self.hasCreatUser) {
    size_ += computeMessageSize(4, self.creatUser);
  }
  [self.followersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  if (self.hasFollowersCount) {
    size_ += computeInt32Size(11, self.followersCount);
  }
  if (self.hasIcon) {
    size_ += computeStringSize(20, self.icon);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.feedIdArray.count;
    [self.feedIdArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasCreatedAt) {
    size_ += computeInt32Size(40, self.createdAt);
  }
  if (self.hasUpdatedAt) {
    size_ += computeInt32Size(41, self.updatedAt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBTopic*) parseFromData:(NSData*) data {
  return (PBTopic*)[[[PBTopic builder] mergeFromData:data] build];
}
+ (PBTopic*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTopic*)[[[PBTopic builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBTopic*) parseFromInputStream:(NSInputStream*) input {
  return (PBTopic*)[[[PBTopic builder] mergeFromInputStream:input] build];
}
+ (PBTopic*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTopic*)[[[PBTopic builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBTopic*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBTopic*)[[[PBTopic builder] mergeFromCodedInputStream:input] build];
}
+ (PBTopic*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBTopic*)[[[PBTopic builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBTopicBuilder*) builder {
  return [[PBTopicBuilder alloc] init];
}
+ (PBTopicBuilder*) builderWithPrototype:(PBTopic*) prototype {
  return [[PBTopic builder] mergeFrom:prototype];
}
- (PBTopicBuilder*) builder {
  return [PBTopic builder];
}
- (PBTopicBuilder*) toBuilder {
  return [PBTopic builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTopicId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"topicId", self.topicId];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasCreatUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"creatUser"];
    [self.creatUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.followersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"followers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasFollowersCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"followersCount", [NSNumber numberWithInteger:self.followersCount]];
  }
  if (self.hasIcon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"icon", self.icon];
  }
  [self.feedIdArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"feedId", obj];
  }];
  if (self.hasCreatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdAt", [NSNumber numberWithInteger:self.createdAt]];
  }
  if (self.hasUpdatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updatedAt", [NSNumber numberWithInteger:self.updatedAt]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBTopic class]]) {
    return NO;
  }
  PBTopic *otherMessage = other;
  return
      self.hasTopicId == otherMessage.hasTopicId &&
      (!self.hasTopicId || [self.topicId isEqual:otherMessage.topicId]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasCreatUser == otherMessage.hasCreatUser &&
      (!self.hasCreatUser || [self.creatUser isEqual:otherMessage.creatUser]) &&
      [self.followersArray isEqualToArray:otherMessage.followersArray] &&
      self.hasFollowersCount == otherMessage.hasFollowersCount &&
      (!self.hasFollowersCount || self.followersCount == otherMessage.followersCount) &&
      self.hasIcon == otherMessage.hasIcon &&
      (!self.hasIcon || [self.icon isEqual:otherMessage.icon]) &&
      [self.feedIdArray isEqualToArray:otherMessage.feedIdArray] &&
      self.hasCreatedAt == otherMessage.hasCreatedAt &&
      (!self.hasCreatedAt || self.createdAt == otherMessage.createdAt) &&
      self.hasUpdatedAt == otherMessage.hasUpdatedAt &&
      (!self.hasUpdatedAt || self.updatedAt == otherMessage.updatedAt) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTopicId) {
    hashCode = hashCode * 31 + [self.topicId hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasCreatUser) {
    hashCode = hashCode * 31 + [self.creatUser hash];
  }
  [self.followersArray enumerateObjectsUsingBlock:^(PBUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasFollowersCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.followersCount] hash];
  }
  if (self.hasIcon) {
    hashCode = hashCode * 31 + [self.icon hash];
  }
  [self.feedIdArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasCreatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createdAt] hash];
  }
  if (self.hasUpdatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.updatedAt] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBTopicBuilder()
@property (strong) PBTopic* resultPbtopic;
@end

@implementation PBTopicBuilder
@synthesize resultPbtopic;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbtopic = [[PBTopic alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbtopic;
}
- (PBTopicBuilder*) clear {
  self.resultPbtopic = [[PBTopic alloc] init];
  return self;
}
- (PBTopicBuilder*) clone {
  return [PBTopic builderWithPrototype:resultPbtopic];
}
- (PBTopic*) defaultInstance {
  return [PBTopic defaultInstance];
}
- (PBTopic*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBTopic*) buildPartial {
  PBTopic* returnMe = resultPbtopic;
  self.resultPbtopic = nil;
  return returnMe;
}
- (PBTopicBuilder*) mergeFrom:(PBTopic*) other {
  if (other == [PBTopic defaultInstance]) {
    return self;
  }
  if (other.hasTopicId) {
    [self setTopicId:other.topicId];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasCreatUser) {
    [self mergeCreatUser:other.creatUser];
  }
  if (other.followersArray.count > 0) {
    if (resultPbtopic.followersArray == nil) {
      resultPbtopic.followersArray = [[NSMutableArray alloc] initWithArray:other.followersArray];
    } else {
      [resultPbtopic.followersArray addObjectsFromArray:other.followersArray];
    }
  }
  if (other.hasFollowersCount) {
    [self setFollowersCount:other.followersCount];
  }
  if (other.hasIcon) {
    [self setIcon:other.icon];
  }
  if (other.feedIdArray.count > 0) {
    if (resultPbtopic.feedIdArray == nil) {
      resultPbtopic.feedIdArray = [[NSMutableArray alloc] initWithArray:other.feedIdArray];
    } else {
      [resultPbtopic.feedIdArray addObjectsFromArray:other.feedIdArray];
    }
  }
  if (other.hasCreatedAt) {
    [self setCreatedAt:other.createdAt];
  }
  if (other.hasUpdatedAt) {
    [self setUpdatedAt:other.updatedAt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBTopicBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBTopicBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTopicId:[input readString]];
        break;
      }
      case 18: {
        [self setTitle:[input readString]];
        break;
      }
      case 34: {
        PBUserBuilder* subBuilder = [PBUser builder];
        if (self.hasCreatUser) {
          [subBuilder mergeFrom:self.creatUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreatUser:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        PBUserBuilder* subBuilder = [PBUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFollowers:[subBuilder buildPartial]];
        break;
      }
      case 88: {
        [self setFollowersCount:[input readInt32]];
        break;
      }
      case 162: {
        [self setIcon:[input readString]];
        break;
      }
      case 242: {
        [self addFeedId:[input readString]];
        break;
      }
      case 320: {
        [self setCreatedAt:[input readInt32]];
        break;
      }
      case 328: {
        [self setUpdatedAt:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTopicId {
  return resultPbtopic.hasTopicId;
}
- (NSString*) topicId {
  return resultPbtopic.topicId;
}
- (PBTopicBuilder*) setTopicId:(NSString*) value {
  resultPbtopic.hasTopicId = YES;
  resultPbtopic.topicId = value;
  return self;
}
- (PBTopicBuilder*) clearTopicId {
  resultPbtopic.hasTopicId = NO;
  resultPbtopic.topicId = @"";
  return self;
}
- (BOOL) hasTitle {
  return resultPbtopic.hasTitle;
}
- (NSString*) title {
  return resultPbtopic.title;
}
- (PBTopicBuilder*) setTitle:(NSString*) value {
  resultPbtopic.hasTitle = YES;
  resultPbtopic.title = value;
  return self;
}
- (PBTopicBuilder*) clearTitle {
  resultPbtopic.hasTitle = NO;
  resultPbtopic.title = @"";
  return self;
}
- (BOOL) hasCreatUser {
  return resultPbtopic.hasCreatUser;
}
- (PBUser*) creatUser {
  return resultPbtopic.creatUser;
}
- (PBTopicBuilder*) setCreatUser:(PBUser*) value {
  resultPbtopic.hasCreatUser = YES;
  resultPbtopic.creatUser = value;
  return self;
}
- (PBTopicBuilder*) setCreatUserBuilder:(PBUserBuilder*) builderForValue {
  return [self setCreatUser:[builderForValue build]];
}
- (PBTopicBuilder*) mergeCreatUser:(PBUser*) value {
  if (resultPbtopic.hasCreatUser &&
      resultPbtopic.creatUser != [PBUser defaultInstance]) {
    resultPbtopic.creatUser =
      [[[PBUser builderWithPrototype:resultPbtopic.creatUser] mergeFrom:value] buildPartial];
  } else {
    resultPbtopic.creatUser = value;
  }
  resultPbtopic.hasCreatUser = YES;
  return self;
}
- (PBTopicBuilder*) clearCreatUser {
  resultPbtopic.hasCreatUser = NO;
  resultPbtopic.creatUser = [PBUser defaultInstance];
  return self;
}
- (NSMutableArray *)followers {
  return resultPbtopic.followersArray;
}
- (PBUser*)followersAtIndex:(NSUInteger)index {
  return [resultPbtopic followersAtIndex:index];
}
- (PBTopicBuilder *)addFollowers:(PBUser*)value {
  if (resultPbtopic.followersArray == nil) {
    resultPbtopic.followersArray = [[NSMutableArray alloc]init];
  }
  [resultPbtopic.followersArray addObject:value];
  return self;
}
- (PBTopicBuilder *)setFollowersArray:(NSArray *)array {
  resultPbtopic.followersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBTopicBuilder *)clearFollowers {
  resultPbtopic.followersArray = nil;
  return self;
}
- (BOOL) hasFollowersCount {
  return resultPbtopic.hasFollowersCount;
}
- (SInt32) followersCount {
  return resultPbtopic.followersCount;
}
- (PBTopicBuilder*) setFollowersCount:(SInt32) value {
  resultPbtopic.hasFollowersCount = YES;
  resultPbtopic.followersCount = value;
  return self;
}
- (PBTopicBuilder*) clearFollowersCount {
  resultPbtopic.hasFollowersCount = NO;
  resultPbtopic.followersCount = 0;
  return self;
}
- (BOOL) hasIcon {
  return resultPbtopic.hasIcon;
}
- (NSString*) icon {
  return resultPbtopic.icon;
}
- (PBTopicBuilder*) setIcon:(NSString*) value {
  resultPbtopic.hasIcon = YES;
  resultPbtopic.icon = value;
  return self;
}
- (PBTopicBuilder*) clearIcon {
  resultPbtopic.hasIcon = NO;
  resultPbtopic.icon = @"";
  return self;
}
- (NSMutableArray *)feedId {
  return resultPbtopic.feedIdArray;
}
- (NSString*)feedIdAtIndex:(NSUInteger)index {
  return [resultPbtopic feedIdAtIndex:index];
}
- (PBTopicBuilder *)addFeedId:(NSString*)value {
  if (resultPbtopic.feedIdArray == nil) {
    resultPbtopic.feedIdArray = [[NSMutableArray alloc]init];
  }
  [resultPbtopic.feedIdArray addObject:value];
  return self;
}
- (PBTopicBuilder *)setFeedIdArray:(NSArray *)array {
  resultPbtopic.feedIdArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PBTopicBuilder *)clearFeedId {
  resultPbtopic.feedIdArray = nil;
  return self;
}
- (BOOL) hasCreatedAt {
  return resultPbtopic.hasCreatedAt;
}
- (SInt32) createdAt {
  return resultPbtopic.createdAt;
}
- (PBTopicBuilder*) setCreatedAt:(SInt32) value {
  resultPbtopic.hasCreatedAt = YES;
  resultPbtopic.createdAt = value;
  return self;
}
- (PBTopicBuilder*) clearCreatedAt {
  resultPbtopic.hasCreatedAt = NO;
  resultPbtopic.createdAt = 0;
  return self;
}
- (BOOL) hasUpdatedAt {
  return resultPbtopic.hasUpdatedAt;
}
- (SInt32) updatedAt {
  return resultPbtopic.updatedAt;
}
- (PBTopicBuilder*) setUpdatedAt:(SInt32) value {
  resultPbtopic.hasUpdatedAt = YES;
  resultPbtopic.updatedAt = value;
  return self;
}
- (PBTopicBuilder*) clearUpdatedAt {
  resultPbtopic.hasUpdatedAt = NO;
  resultPbtopic.updatedAt = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
